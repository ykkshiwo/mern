{"version":3,"sources":["webpack:///./server/renderedPageRouter.jsx"],"names":["__webpack_require__","renderedPageRouter","Router","get","req","res","console","log","url","routes","props","children","send"],"mappings":"iHAAAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAFA,QAIAA,EAAA,SAEAA,EAAA,OACAA,EAAA,QACAA,EAAA,wDAEA,IAAMC,EAAqB,IAAIC,UAE/BD,EAAmBE,IAAI,IAAK,SAACC,EAAKC,GAChCC,QAAQC,IAAI,WACZD,QAAQC,IAAIH,EAAII,KAEhBF,QAAQC,IAAIE,UAAOC,MAAMC,SAASD,MAAMC,UACxCN,EAAIO,KAAK,2BAiCIX","file":"0.eb084ef805ac6d07c5be.hot-update.js","sourcesContent":["import React from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\nimport { matchPath, RouterContext } from 'react-router';\r\n\r\nimport Router from 'express';\r\n\r\nimport template from './template.js';\r\nimport routes from '../src/Routes.jsx';\r\nimport ContextWrapper from '../src/ContextWrapper.jsx';\r\n \r\nconst renderedPageRouter = new Router();\r\n\r\nrenderedPageRouter.get('*', (req, res) => {\r\n  console.log(\"服务器启用成功\");\r\n  console.log(req.url);\r\n  // console.log(routes);\r\n  console.log(routes.props.children.props.children);\r\n  res.send(\"test now...\");\r\n  // matchPath({ routes, location: req.url }, (error, redirectLocation, renderProps) => {\r\n  //   if (error) {\r\n  //     res.status(500).send(error.message);\r\n  //   } else if (redirectLocation) {\r\n  //     res.redirect(302, redirectLocation.pathname + redirectLocation.search);\r\n  //   } else if (renderProps) {\r\n  //     const componentsWithData = renderProps.components.filter(c => c.dataFetcher);\r\n  //     const dataFetchers = componentsWithData.map(c => c.dataFetcher({\r\n  //       params: renderProps.params, location: renderProps.location,\r\n  //       urlBase: 'http://localhost:3000', cookie: req.headers.cookie,\r\n  //     }));\r\n  //     Promise.all(dataFetchers).then((dataList) => {\r\n  //       let initialState = {};\r\n  //       dataList.forEach((namedData) => {\r\n  //         initialState = Object.assign(initialState, namedData);\r\n  //       });\r\n  //       const html = renderToString(\r\n  //         <ContextWrapper initialState={initialState} >\r\n  //           <RouterContext {...renderProps} />\r\n  //         </ContextWrapper>\r\n  //       );\r\n  //       res.status(200).send(template(html, initialState));\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.log(`Error rendering to string: ${err}`);\r\n  //     });\r\n  //   } else {\r\n  //     res.status(404).send('Not found');\r\n  //   }\r\n  // });\r\n});\r\n\r\nexport default renderedPageRouter;\r\n"],"sourceRoot":""}