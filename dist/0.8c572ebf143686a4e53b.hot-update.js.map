{"version":3,"sources":["webpack:///./server/renderedPageRouter.jsx"],"names":["__webpack_require__","_server","_reactRouter","renderedPageRouter","Router","get","req","res","console","log","conso","url","match","routes","location","error","redirectLocation","renderProps","status","send","message","redirect","pathname","search","dataFetchers","components","filter","c","dataFetcher","map","params","urlBase","cookie","headers","Promise","all","then","dataList","initialState","forEach","namedData","Object","assign","html","renderToString","_react2","default","createElement","_ContextWrapper2","RouterContext","_template2","catch","err"],"mappings":"+GAAA,QAAAA,EAAA,IACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,QAEAA,EAAA,QAEAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDAEA,IAAMG,EAAqB,IAAIC,UAE/BD,EAAmBE,IAAI,IAAK,SAACC,EAAKC,GAChCC,QAAQC,IAAI,WACZC,MAAMD,IAAIH,EAAIK,MACd,EAAAT,EAAAU,OAAM,CAAEC,iBAAQC,SAAUR,EAAIK,KAAO,SAACI,EAAOC,EAAkBC,GAC7D,GAAIF,EACFR,EAAIW,OAAO,KAAKC,KAAKJ,EAAMK,cACtB,GAAIJ,EACTT,EAAIc,SAAS,IAAKL,EAAiBM,SAAWN,EAAiBO,aAC1D,GAAIN,EAAa,CACtB,IACMO,EADqBP,EAAYQ,WAAWC,OAAO,SAAAC,GAAA,OAAKA,EAAEC,cACxBC,IAAI,SAAAF,GAAA,OAAKA,EAAEC,YAAY,CAC7DE,OAAQb,EAAYa,OAAQhB,SAAUG,EAAYH,SAClDiB,QAAS,wBAAyBC,OAAQ1B,EAAI2B,QAAQD,WAExDE,QAAQC,IAAIX,GAAcY,KAAK,SAACC,GAC9B,IAAIC,EAAe,GACnBD,EAASE,QAAQ,SAACC,GAChBF,EAAeG,OAAOC,OAAOJ,EAAcE,KAE7C,IAAMG,GAAO,EAAA1C,EAAA2C,gBACXC,EAAAC,QAAAC,cAACC,EAAAF,QAAD,CAAgBR,aAAcA,GAC5BO,EAAAC,QAAAC,cAAC7C,EAAA+C,cAAkBhC,KAGvBV,EAAIW,OAAO,KAAKC,MAAK,EAAA+B,EAAAJ,SAASH,EAAML,MAErCa,MAAM,SAAAC,GACL5C,QAAQC,IAAR,8BAA0C2C,UAG5C7C,EAAIW,OAAO,KAAKC,KAAK,2BAKZhB","file":"0.8c572ebf143686a4e53b.hot-update.js","sourcesContent":["import React from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\nimport { match, RouterContext } from 'react-router';\r\n\r\nimport Router from 'express';\r\n\r\nimport template from './template.js';\r\nimport routes from '../src/Routes.jsx';\r\nimport ContextWrapper from '../src/ContextWrapper.jsx';\r\n \r\nconst renderedPageRouter = new Router();\r\n\r\nrenderedPageRouter.get('*', (req, res) => {\r\n  console.log(\"服务器启用成功\");\r\n  conso.log(req.url);\r\n  match({ routes, location: req.url }, (error, redirectLocation, renderProps) => {\r\n    if (error) {\r\n      res.status(500).send(error.message);\r\n    } else if (redirectLocation) {\r\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search);\r\n    } else if (renderProps) {\r\n      const componentsWithData = renderProps.components.filter(c => c.dataFetcher);\r\n      const dataFetchers = componentsWithData.map(c => c.dataFetcher({\r\n        params: renderProps.params, location: renderProps.location,\r\n        urlBase: 'http://localhost:3000', cookie: req.headers.cookie,\r\n      }));\r\n      Promise.all(dataFetchers).then((dataList) => {\r\n        let initialState = {};\r\n        dataList.forEach((namedData) => {\r\n          initialState = Object.assign(initialState, namedData);\r\n        });\r\n        const html = renderToString(\r\n          <ContextWrapper initialState={initialState} >\r\n            <RouterContext {...renderProps} />\r\n          </ContextWrapper>\r\n        );\r\n        res.status(200).send(template(html, initialState));\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error rendering to string: ${err}`);\r\n      });\r\n    } else {\r\n      res.status(404).send('Not found');\r\n    }\r\n  });\r\n});\r\n\r\nexport default renderedPageRouter;\r\n"],"sourceRoot":""}