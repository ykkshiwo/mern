{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["__webpack_require__","_reactRouterDom","_reactBootstrap","require","IssueRow","props","onDeleteClick","deleteIssue","issue","_id","_react2","default","createElement","Link","to","substr","status","owner","effort","title","onClick","className","alert","IssueTable","IssueRows","issues","map","key","Table","condensed","hover","responsive","bordered","IssueList","context","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","console","log","staticContext","i","records","state","bind","React","Component","id","_this2","fetch","method","then","response","ok","loadData","location","search","showError","q","_this3","json","data","forEach","created","Date","completionDate","setState","error","catch","err"],"mappings":"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","file":"0.081e786c6f3784ee3921.hot-update.js","sourcesContent":["// import IssueAdd from './IssueAdd.jsx'\r\nimport IssueFilter from './IssueFilter.jsx';\r\nimport React from 'react';\r\nimport 'isomorphic-fetch';\r\nimport { Link, } from 'react-router-dom';\r\nimport { Button, Glyphicon, Table, Panel, Pagination } from 'react-bootstrap';\r\nconst qs = require('query-string');\r\n\r\nconst IssueRow = (props) => {\r\n    function onDeleteClick() {\r\n        props.deleteIssue(props.issue._id);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td><Link to={`/issues/${props.issue._id}`}>{props.issue._id.substr(-4)}</Link></td>\r\n            <td>{props.issue.status}</td>\r\n            <td>{props.issue.owner}</td>\r\n            {/* <td>{props.issue.created.toDateString()}</td> */}\r\n            <td>{props.issue.effort}</td>\r\n            {/* <td>{props.issue.completionDate ? props.issue.completionDate.toDateString() : ''}</td> */}\r\n            <td>{props.issue.title}</td>\r\n            <td>\r\n                <span onClick={onDeleteClick} className=\"glyphicon glyphicon-trash\"></span>\r\n            </td>\r\n            <td onClick={onDeleteClick}>删除</td>\r\n            <button onClick={alert(\"点击按钮有反应\")}>test</button>\r\n        </tr>\r\n    );\r\n};\r\n\r\nfunction IssueTable(props) {\r\n    const IssueRows = props.issues.map(issue => <IssueRow key={issue._id} issue={issue} deleteIssue={props.deleteIssue} />);\r\n    return (\r\n        <Table condensed hover responsive bordered>\r\n            <thead>\r\n                <tr>\r\n                    <th>Id</th>\r\n                    <th>Status</th>\r\n                    <th>Owner</th>\r\n                    <th>Created</th>\r\n                    <th>Effort</th>\r\n                    <th>Completion Date</th>\r\n                    <th>Title</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {IssueRows}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nexport default class IssueList extends React.Component {\r\n\r\n    // static dataFetcher({ urlBase, location }) {\r\n    //     const query = Object.assign({}, location.query);\r\n    //     const pageStr = query._page;\r\n    //     if (pageStr) {\r\n    //         delete query._page;\r\n    //         query._offset = (parseInt(pageStr, 10) - 1) * PAGE_SIZE;\r\n    //     }\r\n    //     query._limit = PAGE_SIZE;\r\n    //     const search = Object.keys(query).map(k => `${k}=${query[k]}`).join('&');\r\n    //     return fetch(`${urlBase || ''}/api/issues?${search}`).then(response => {\r\n    //         if (!response.ok) return response.json().then(error => Promise.reject(error));\r\n    //         return response.json().then(data => ({ IssueList: data }));\r\n    //     });\r\n    // }\r\n\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = { issues: [] };\r\n    //     this.choosePars = \"ykk\";\r\n    //     this.setFilter = this.setFilter.bind(this);\r\n    //     this.createIssue = this.createIssue.bind(this);\r\n    //     this.deleteIssue = this.deleteIssue.bind(this);\r\n    // }\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        console.log(\"context的值是：\", this.props.staticContext);\r\n        console.log(\"渲染的数据的值是：\", this.props.staticContext.i.records);\r\n        // const data = context.initialState.IssueList ? context.initialState.IssueList\r\n        //   : { metadata: { totalCount: 0 }, records: [] };\r\n        // const issues = data.records;\r\n        // issues.forEach(issue => {\r\n        //   issue.created = new Date(issue.created);\r\n        //   if (issue.completionDate) {\r\n        //     issue.completionDate = new Date(issue.completionDate);\r\n        //   }\r\n        // });\r\n        this.state = {\r\n            // issues: 'ykujh',\r\n            issues: this.props.staticContext.i.records,\r\n        };\r\n\r\n        // this.setFilter = this.setFilter.bind(this);\r\n        // this.selectPage = this.selectPage.bind(this);\r\n        this.deleteIssue = this.deleteIssue.bind(this);\r\n    }\r\n\r\n    // selectPage(eventKey) {\r\n    //     const query = Object.assign(this.props.location.query, { _page: eventKey });\r\n    //     this.props.router.push({ pathname: this.props.location.pathname, query });\r\n    // }\r\n\r\n    deleteIssue(id) {\r\n        console.log(\"user want to delelte me```\");\r\n        fetch(`/api/issues/${id}`, { method: 'DELETE' }).then(response => {\r\n            console.log(\"the response data is: \", response);\r\n            if (!response.ok) this.props.showError('Failed to delete issue');\r\n            else {\r\n                console.log(\"start loaddata```\")\r\n                this.loadData(this.props.location.search);\r\n            }\r\n        });\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     console.log(\"开始执行请求函数\");\r\n    //     console.log(this.state.issues);\r\n    //     this.loadData(this.props.location.search);\r\n    // }\r\n\r\n    // componentDidUpdate(prevProps, prevState) {\r\n    //     const oldQuery = prevProps.location.search;\r\n    //     const newQuery = this.props.location.search;\r\n    //     console.log(\"以前的数据是: \", oldQuery);\r\n    //     console.log(\"现在的数据是: \", newQuery);\r\n    //     if (oldQuery === newQuery) {\r\n    //         return;\r\n    //     }\r\n    //     console.log(\"the search is: \", this.props.location.search);\r\n    //     this.loadData(this.props.location.search);   //页面渲染完成以后调用\r\n    // }\r\n\r\n    // setFilter(query) {\r\n    //     console.log(\"this.props.history is 1: \", this.props.history);\r\n    //     this.props.history.replace('/issues?' + qs.stringify(query));\r\n    //     console.log(\"url即将替换为：\", '/issues?' + qs.stringify(query));\r\n    //     console.log(\"this.props.history is 2: \", this.props.history);\r\n    // };\r\n\r\n    loadData(q) {\r\n        console.log(\"开始请求原始数据\");\r\n        console.log(this.props.location);\r\n        console.log(\"qqqqqq: \", q);\r\n        fetch(`/api/issues${q}`).then(response => {\r\n            console.log(\"原始数据请求成功: \", response);\r\n            if (response.ok) {\r\n                console.log(\"返回的response数据是： \", response);\r\n                response.json().then(data => {\r\n                    console.log(\"请求的数据调回: \", data);\r\n                    // console.log(data._metadata.total_count);\r\n                    data.records.forEach(issue => {\r\n                        issue.created = new Date(issue.created);\r\n                        if (issue.completionDate) {\r\n                            issue.completionDate = new Date(issue.completionDate);\r\n                        }\r\n                    });\r\n                    console.log(\"最后需要渲染的数据数据:\", data.records);\r\n                    this.setState({ issues: data.records });\r\n                });\r\n            } else {\r\n                response.json().then(error => {\r\n                    alert(\"Failed\");\r\n                })\r\n            }\r\n        }).catch(err => {\r\n            alert(\"Error\")\r\n        });\r\n    }\r\n\r\n    // createIssue(newIssue) {\r\n    //     console.log(\"触发post请求\");\r\n    //     fetch('/api/issues', {\r\n    //         method: 'POST',\r\n    //         headers: { 'Content-Type': 'application/json' },\r\n    //         body: JSON.stringify(newIssue),\r\n    //     }).then(response => { return response.json() }).then(\r\n    //         updatedIssue => {\r\n    //             console.log(\"here 1: \" + updatedIssue)\r\n    //             updatedIssue.created = new Date(updatedIssue.created);\r\n    //             console.log(updatedIssue.created);\r\n    //             if (updatedIssue.completionDate) {\r\n    //                 updatedIssue.completionDate = new Date(updatedIssue.completionDate);\r\n    //             }\r\n    //             const newIssues = this.state.issues.concat(updatedIssue);\r\n    //             console.log(newIssues);\r\n    //             this.setState({ issues: newIssues });\r\n    //         }\r\n    //     ).catch(err => {\r\n    //         alert(err.message);\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>This is ykk's place.</h1>\r\n                {/* <Panel header='Filter'>\r\n                    <IssueFilter setFilter={this.setFilter} choosePars={this.choosePars} initFilter={this.props.location.search} />\r\n                </Panel> */}\r\n                <IssueTable issues={this.state.issues} deleteIssue={this.deleteIssue} />\r\n                <hr />\r\n                {/* <IssueAdd createIssue={this.createIssue} /> */}\r\n                {/* {JSON.stringify(this.state.issues)} */}\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}