{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["__webpack_require__","require","IssueList","props","context","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","console","log","staticContext","state","issues","React","Component","_react2","default","createElement","i","metadata","totalCount"],"mappings":"6WACAA,EAAA,OACAA,EAAA,KACAA,EAAA,IACAA,EAAA,GACAA,EAAA,sDACWC,EAAQ,GAAnB,IAgDqBC,cA0BjB,SAAAA,EAAYC,EAAOC,gGAASC,CAAAC,KAAAJ,GAAA,IAAAK,mKAAAC,CAAAF,MAAAJ,EAAAO,WAAAC,OAAAC,eAAAT,IAAAU,KAAAN,KAClBH,EAAOC,IADW,OAExBS,QAAQC,IAAI,cAAeP,EAAKJ,MAAMY,eAUtCR,EAAKS,MAAQ,CACTC,OAAQ,IAbYV,qUA1BOW,UAAMC,+CA+IrC,OACIC,EAAAC,QAAAC,cAAA,WAQKhB,KAAKH,MAAMY,cAAcQ,EAAEC,SAASC,+BAxJhCvB","file":"0.d37fe2d4e265d6a1d6a6.hot-update.js","sourcesContent":["// import IssueAdd from './IssueAdd.jsx'\r\nimport IssueFilter from './IssueFilter.jsx';\r\nimport React from 'react';\r\nimport 'isomorphic-fetch';\r\nimport { Link, } from 'react-router-dom';\r\nimport { Button, Glyphicon, Table, Panel, Pagination } from 'react-bootstrap';\r\nconst qs = require('query-string');\r\n\r\n// const IssueRow = (props) => {\r\n//     function onDeleteClick() {\r\n//         props.deleteIssue(props.issue._id);\r\n//     }\r\n\r\n//     return (\r\n//         <tr>\r\n//             <td><Link to={`/issues/${props.issue._id}`}>{props.issue._id.substr(-4)}</Link></td>\r\n//             <td>{props.issue.status}</td>\r\n//             <td>{props.issue.owner}</td>\r\n//             <td>{props.issue.created.toDateString()}</td>\r\n//             <td>{props.issue.effort}</td>\r\n//             <td>{props.issue.completionDate ? props.issue.completionDate.toDateString() : ''}</td>\r\n//             <td>{props.issue.title}</td>\r\n//             <td>\r\n//                 <span onClick={onDeleteClick} className=\"glyphicon glyphicon-trash\"></span>\r\n//             </td>\r\n//         </tr>\r\n//     );\r\n// };\r\n\r\n// function IssueTable(props) {\r\n//     const IssueRows = props.issues.map(issue => <IssueRow key={issue._id} issue={issue} deleteIssue={props.deleteIssue} />);\r\n//     return (\r\n//         <Table condensed hover responsive bordered>\r\n//             <thead>\r\n//                 <tr>\r\n//                     <th>Id</th>\r\n//                     <th>Status</th>\r\n//                     <th>Owner</th>\r\n//                     <th>Created</th>\r\n//                     <th>Effort</th>\r\n//                     <th>Completion Date</th>\r\n//                     <th>Title</th>\r\n//                     <th></th>\r\n//                 </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//                 {IssueRows}\r\n//             </tbody>\r\n//         </Table>\r\n//     )\r\n// }\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nexport default class IssueList extends React.Component {\r\n\r\n    // static dataFetcher({ urlBase, location }) {\r\n    //     const query = Object.assign({}, location.query);\r\n    //     const pageStr = query._page;\r\n    //     if (pageStr) {\r\n    //         delete query._page;\r\n    //         query._offset = (parseInt(pageStr, 10) - 1) * PAGE_SIZE;\r\n    //     }\r\n    //     query._limit = PAGE_SIZE;\r\n    //     const search = Object.keys(query).map(k => `${k}=${query[k]}`).join('&');\r\n    //     return fetch(`${urlBase || ''}/api/issues?${search}`).then(response => {\r\n    //         if (!response.ok) return response.json().then(error => Promise.reject(error));\r\n    //         return response.json().then(data => ({ IssueList: data }));\r\n    //     });\r\n    // }\r\n\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = { issues: [] };\r\n    //     this.choosePars = \"ykk\";\r\n    //     this.setFilter = this.setFilter.bind(this);\r\n    //     this.createIssue = this.createIssue.bind(this);\r\n    //     this.deleteIssue = this.deleteIssue.bind(this);\r\n    // }\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        console.log(\"context的值是：\", this.props.staticContext);\r\n        // const data = context.initialState.IssueList ? context.initialState.IssueList\r\n        //   : { metadata: { totalCount: 0 }, records: [] };\r\n        // const issues = data.records;\r\n        // issues.forEach(issue => {\r\n        //   issue.created = new Date(issue.created);\r\n        //   if (issue.completionDate) {\r\n        //     issue.completionDate = new Date(issue.completionDate);\r\n        //   }\r\n        // });\r\n        this.state = {\r\n            issues: [],\r\n            //   totalCount: data.metadata.totalCount,\r\n        };\r\n\r\n        // this.setFilter = this.setFilter.bind(this);\r\n        // this.selectPage = this.selectPage.bind(this);\r\n        // this.deleteIssue = this.deleteIssue.bind(this);\r\n    }\r\n\r\n    // selectPage(eventKey) {\r\n    //     const query = Object.assign(this.props.location.query, { _page: eventKey });\r\n    //     this.props.router.push({ pathname: this.props.location.pathname, query });\r\n    // }\r\n\r\n    // deleteIssue(id) {\r\n    //     console.log(\"user want to delelte me```\");\r\n    //     fetch(`/api/issues/${id}`, { method: 'DELETE' }).then(response => {\r\n    //         console.log(\"the response data is: \", response);\r\n    //         if (!response.ok) this.props.showError('Failed to delete issue');\r\n    //         else {\r\n    //             console.log(\"start loaddata```\")\r\n    //             this.loadData(this.props.location.search);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     console.log(\"开始执行请求函数\");\r\n    //     this.loadData(this.props.location.search);\r\n    // }\r\n\r\n    // componentDidUpdate(prevProps, prevState) {\r\n    //     const oldQuery = prevProps.location.search;\r\n    //     const newQuery = this.props.location.search;\r\n    //     console.log(\"以前的数据是: \", oldQuery);\r\n    //     console.log(\"现在的数据是: \", newQuery);\r\n    //     if (oldQuery === newQuery) {\r\n    //         return;\r\n    //     }\r\n    //     console.log(\"the search is: \", this.props.location.search);\r\n    //     this.loadData(this.props.location.search);   //页面渲染完成以后调用\r\n    // }\r\n\r\n    // setFilter(query) {\r\n    //     console.log(\"this.props.history is 1: \", this.props.history);\r\n    //     this.props.history.replace('/issues?' + qs.stringify(query));\r\n    //     console.log(\"url即将替换为：\", '/issues?' + qs.stringify(query));\r\n    //     console.log(\"this.props.history is 2: \", this.props.history);\r\n    // };\r\n\r\n    // loadData(q) {\r\n    //     console.log(\"开始请求原始数据\");\r\n    //     console.log(this.props.location);\r\n    //     console.log(\"qqqqqq: \", q);\r\n    //     fetch(`/api/issues${q}`).then(response => {\r\n    //         console.log(\"原始数据请求成功: \", response);\r\n    //         if (response.ok) {\r\n    //             console.log(\"返回的response数据是： \", response);\r\n    //             response.json().then(data => {\r\n    //                 console.log(\"请求的数据调回: \", data);\r\n    //                 // console.log(data._metadata.total_count);\r\n    //                 data.records.forEach(issue => {\r\n    //                     issue.created = new Date(issue.created);\r\n    //                     if (issue.completionDate) {\r\n    //                         issue.completionDate = new Date(issue.completionDate);\r\n    //                     }\r\n    //                 });\r\n    //                 console.log(\"最后需要渲染的数据数据:\", data.records);\r\n    //                 this.setState({ issues: data.records });\r\n    //             });\r\n    //         } else {\r\n    //             response.json().then(error => {\r\n    //                 alert(\"Failed\");\r\n    //             })\r\n    //         }\r\n    //     }).catch(err => {\r\n    //         alert(\"Error\")\r\n    //     });\r\n    // }\r\n\r\n    // createIssue(newIssue) {\r\n    //     console.log(\"触发post请求\");\r\n    //     fetch('/api/issues', {\r\n    //         method: 'POST',\r\n    //         headers: { 'Content-Type': 'application/json' },\r\n    //         body: JSON.stringify(newIssue),\r\n    //     }).then(response => { return response.json() }).then(\r\n    //         updatedIssue => {\r\n    //             console.log(\"here 1: \" + updatedIssue)\r\n    //             updatedIssue.created = new Date(updatedIssue.created);\r\n    //             console.log(updatedIssue.created);\r\n    //             if (updatedIssue.completionDate) {\r\n    //                 updatedIssue.completionDate = new Date(updatedIssue.completionDate);\r\n    //             }\r\n    //             const newIssues = this.state.issues.concat(updatedIssue);\r\n    //             console.log(newIssues);\r\n    //             this.setState({ issues: newIssues });\r\n    //         }\r\n    //     ).catch(err => {\r\n    //         alert(err.message);\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <h1>This is ykk's place.</h1>\r\n                <Panel header='Filter'>\r\n                    <IssueFilter setFilter={this.setFilter} choosePars={this.choosePars} initFilter={this.props.location.search} />\r\n                </Panel>\r\n                <IssueTable issues={this.state.issues} deleteIssue={this.deleteIssue} />\r\n                <hr /> */}\r\n                {/* <IssueAdd createIssue={this.createIssue} /> */}\r\n                {this.props.staticContext.i.metadata.totalCount}\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}